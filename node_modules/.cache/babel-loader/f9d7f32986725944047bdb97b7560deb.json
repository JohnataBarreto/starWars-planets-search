{"ast":null,"code":"var _jsxFileName = \"/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport swPlanetsApi from './componetes/api';\nimport { SwContext } from './swContex';\n\nfunction StarWarProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [name, setName] = useState('');\n  const [coluna, setColuna] = useState('');\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n  }\n\n  function getColuna(target) {\n    const {\n      value\n    } = target;\n    setColuna(value);\n  }\n\n  function getOperador(target) {\n    const {\n      value\n    } = target;\n    setOperador(value);\n  }\n\n  function getOperando(target) {\n    const {\n      value\n    } = target;\n    setOperando(value);\n  }\n\n  function getOrdenador(target) {\n    const {\n      value\n    } = target;\n    setOrdenador(value);\n  }\n\n  function getOrdem(target) {\n    const {\n      value\n    } = target;\n    setOrdem(value);\n  }\n\n  function getName(target) {\n    const {\n      value\n    } = target;\n    setName(value);\n  }\n\n  useEffect(getData, []);\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    name,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem\n  };\n  return /*#__PURE__*/React.createElement(SwContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired\n};\nexport default StarWarProvider;","map":{"version":3,"sources":["/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js"],"names":["React","useEffect","useState","swPlanetsApi","SwContext","StarWarProvider","children","data","setData","name","setName","coluna","setColuna","operador","setOperador","operando","setOperando","ordenador","setOrdenador","ordem","setOrdem","getData","temp","results","getColuna","target","value","getOperador","getOperando","getOrdenador","getOrdem","getName","contextValue","propTypes","PropTypes","objectOf","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAEA,SAASC,eAAT,OAAuC;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,iBAAemB,OAAf,GAAyB;AACvB,UAAMC,IAAI,GAAG,MAAMnB,YAAY,EAA/B;AACAK,IAAAA,OAAO,CAACc,IAAI,CAACC,OAAN,CAAP;AACD;;AAED,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAb,IAAAA,SAAS,CAACc,KAAD,CAAT;AACD;;AAED,WAASC,WAAT,CAAqBF,MAArB,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAX,IAAAA,WAAW,CAACY,KAAD,CAAX;AACD;;AAED,WAASE,WAAT,CAAqBH,MAArB,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAT,IAAAA,WAAW,CAACU,KAAD,CAAX;AACD;;AAED,WAASG,YAAT,CAAsBJ,MAAtB,EAA8B;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAP,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,WAASI,QAAT,CAAkBL,MAAlB,EAA0B;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAL,IAAAA,QAAQ,CAACM,KAAD,CAAR;AACD;;AAED,WAASK,OAAT,CAAiBN,MAAjB,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,MAAlB;AACAf,IAAAA,OAAO,CAACgB,KAAD,CAAP;AACD;;AAEDzB,EAAAA,SAAS,CAACoB,OAAD,EAAU,EAAV,CAAT;AAEA,QAAMW,YAAY,GAAG;AACnBzB,IAAAA,IADmB;AAEnBI,IAAAA,MAFmB;AAGnBE,IAAAA,QAHmB;AAInBE,IAAAA,QAJmB;AAKnBE,IAAAA,SALmB;AAMnBE,IAAAA,KANmB;AAOnBV,IAAAA,IAPmB;AAQnBsB,IAAAA,OARmB;AASnBP,IAAAA,SATmB;AAUnBG,IAAAA,WAVmB;AAWnBC,IAAAA,WAXmB;AAYnBC,IAAAA,YAZmB;AAanBC,IAAAA;AAbmB,GAArB;AAgBA,sBACE,oBAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAGE,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI1B,QADJ,CADF;AAKD;;AAEDD,eAAe,CAAC4B,SAAhB,GAA4B;AAC1B3B,EAAAA,QAAQ,EAAE4B,SAAS,CAACC,QAAV,CAAmBC;AADH,CAA5B;AAIA,eAAe/B,eAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport swPlanetsApi from './componetes/api';\nimport { SwContext } from './swContex';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [name, setName] = useState('');\n  const [coluna, setColuna] = useState('');\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n  }\n\n  function getColuna(target) {\n    const { value } = target;\n    setColuna(value);\n  }\n\n  function getOperador(target) {\n    const { value } = target;\n    setOperador(value);\n  }\n\n  function getOperando(target) {\n    const { value } = target;\n    setOperando(value);\n  }\n\n  function getOrdenador(target) {\n    const { value } = target;\n    setOrdenador(value);\n  }\n\n  function getOrdem(target) {\n    const { value } = target;\n    setOrdem(value);\n  }\n\n  function getName(target) {\n    const { value } = target;\n    setName(value);\n  }\n\n  useEffect(getData, []);\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    name,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n  };\n\n  return (\n    <SwContext.Provider value={ contextValue }>\n      { children }\n    </SwContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired,\n};\n\nexport default StarWarProvider;\n"]},"metadata":{},"sourceType":"module"}