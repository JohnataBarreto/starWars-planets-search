{"ast":null,"code":"var _jsxFileName = \"/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n  const [opColuna, setOpColuna] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [coluna, setColuna] = useState(opColuna[0]);\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setOperador('maior que');\n    setRestoryData(temp.results);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter(planet => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) {\n      filterData();\n    } else {\n      getData();\n    }\n  }\n\n  useEffect(() => {\n    filter(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n\n  function colun(planeta) {\n    if (coluna === 'population') return planeta.population;\n    if (coluna === 'orbital_period') return planeta.orbital_period;\n    if (coluna === 'diameter') return planeta.diameter;\n    if (coluna === 'rotation_period') return planeta.rotation_period;\n    if (coluna === 'surface_water') return planeta.surface_water;\n    console.log('colun');\n  }\n\n  function maior() {\n    setData(data.filter(planeta => colun(planeta) > +operando));\n  }\n\n  function menor() {\n    setData(data.filter(planeta => colun(planeta) < +operando));\n  }\n\n  function igual() {\n    setData(data.filter(planeta => colun(planeta) === operando));\n  }\n\n  async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  }\n\n  function getColuna(_ref2) {\n    let {\n      target\n    } = _ref2;\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador(_ref3) {\n    let {\n      target\n    } = _ref3;\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  function getOperando(_ref4) {\n    let {\n      target\n    } = _ref4;\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador(_ref5) {\n    let {\n      target\n    } = _ref5;\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem(_ref6) {\n    let {\n      target\n    } = _ref6;\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName(_ref7) {\n    let {\n      target\n    } = _ref7;\n    const valor = target.value;\n    setName(valor);\n  }\n\n  function getOpColuna() {\n    const usados = filterByNumericValues.map(item => item.column);\n    const valor = opColuna.filter(item => !usados.includes(item.nam));\n    setOpColuna(valor);\n  }\n\n  useEffect(() => {\n    getOpColuna(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n  useEffect(() => {\n    setColuna(opColuna[0]); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [opColuna]);\n\n  async function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando\n    };\n    const temp = [...filterByNumericValues, valor];\n    setFilter(temp);\n    filtrar();\n  }\n\n  function deletFilter(_ref8) {\n    let {\n      target\n    } = _ref8;\n    const delName = target.id;\n    const temp = filterByNumericValues.filter(item => item.name !== delName);\n    console.log(delName);\n    setFilter(temp);\n    filtrar();\n  }\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    opColuna,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar,\n    deletFilter\n  };\n  return /*#__PURE__*/React.createElement(SwContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired\n};\nexport default StarWarProvider;","map":{"version":3,"sources":["/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js"],"names":["React","useEffect","useState","PropTypes","swPlanetsApi","SwContext","StarWarProvider","children","data","setData","restoryData","setRestoryData","filterByName","setName","filterByNumericValues","setFilter","operador","setOperador","operando","setOperando","ordenador","setOrdenador","ordem","setOrdem","opColuna","setOpColuna","coluna","setColuna","getData","temp","results","filterData","filter","planet","name","includes","length","colun","planeta","population","orbital_period","diameter","rotation_period","surface_water","console","log","maior","menor","igual","filtrar","getColuna","target","valor","value","getOperador","getOperando","getOrdenador","getOrdem","getName","getOpColuna","usados","map","item","column","nam","getFilter","comparison","deletFilter","delName","id","contextValue","propTypes","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n  const [opColuna, setOpColuna] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [coluna, setColuna] = useState(opColuna[0]);\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setOperador('maior que');\n    setRestoryData(temp.results);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter((planet) => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) { filterData(); } else { getData(); }\n  }\n\n  useEffect(() => {\n    filter();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n\n  function colun(planeta) {\n    if (coluna === 'population') return (planeta.population);\n    if (coluna === 'orbital_period') return (planeta.orbital_period);\n    if (coluna === 'diameter') return (planeta.diameter);\n    if (coluna === 'rotation_period') return (planeta.rotation_period);\n    if (coluna === 'surface_water') return (planeta.surface_water);\n    console.log('colun');\n  }\n\n  function maior() {\n    setData(data.filter((planeta) => (colun(planeta)) > +operando));\n  }\n\n  function menor() {\n    setData(data.filter((planeta) => (colun(planeta)) < +operando));\n  }\n\n  function igual() {\n    setData(data.filter((planeta) => (colun(planeta)) === operando));\n  }\n\n  async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  }\n\n  function getColuna({ target }) {\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador({ target }) {\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  function getOperando({ target }) {\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador({ target }) {\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem({ target }) {\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName({ target }) {\n    const valor = target.value;\n    setName(valor);\n  }\n\n  function getOpColuna() {\n    const usados = filterByNumericValues.map((item) => item.column);\n    const valor = opColuna.filter((item) => !usados.includes(item.nam));\n    setOpColuna(valor);\n  }\n\n  useEffect(() => {\n    getOpColuna();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  useEffect(() => {\n    setColuna(opColuna[0]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [opColuna]);\n\n  async function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando,\n    };\n    const temp = [...filterByNumericValues, valor];\n    setFilter(temp);\n    filtrar();\n  }\n\n  function deletFilter({ target }) {\n    const delName = target.id;\n    const temp = filterByNumericValues.filter((item) => item.name !== delName);\n    console.log(delName);\n    setFilter(temp);\n    filtrar();\n  }\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    opColuna,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar,\n    deletFilter,\n  };\n\n  return (\n    <SwContext.Provider value={ contextValue }>\n      { children }\n    </SwContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired,\n};\n\nexport default StarWarProvider;\n"]},"metadata":{},"sourceType":"module"}