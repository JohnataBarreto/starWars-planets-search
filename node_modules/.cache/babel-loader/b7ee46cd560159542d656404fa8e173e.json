{"ast":null,"code":"var _jsxFileName = \"/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n  const [opColuna, setOpColuna] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  const [coluna, setColuna] = useState(opColuna[0]);\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setOperador('maior que');\n    setRestoryData(temp.results);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter(planet => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) {\n      filterData();\n    } else {\n      getData();\n    }\n  }\n\n  useEffect(() => {\n    filter(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n  /* function colun(planeta) {\n    if (coluna === 'population') return (planeta.population);\n    if (coluna === 'orbital_period') return (planeta.orbital_period);\n    if (coluna === 'diameter') return (planeta.diameter);\n    if (coluna === 'rotation_period') return (planeta.rotation_period);\n    if (coluna === 'surface_water') return (planeta.surface_water);\n    console.log('colun');\n  }\n   function maior() {\n    setData(data.filter((planeta) => (colun(planeta)) > +operando));\n  }\n   function menor() {\n    setData(data.filter((planeta) => (colun(planeta)) < +operando));\n  }\n   function igual() {\n    setData(data.filter((planeta) => (colun(planeta)) === operando));\n  }\n   async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  } */\n\n  function colun(planeta, filtro) {\n    if (filtro.column === 'population') return planeta.population;\n    if (filtro.column === 'orbital_period') return planeta.orbital_period;\n    if (filtro.column === 'diameter') return planeta.diameter;\n    if (filtro.column === 'rotation_period') return planeta.rotation_period;\n    if (filtro.column === 'surface_water') return planeta.surface_water;\n    console.log('colun');\n  }\n\n  function maior(filtro) {\n    setData(data.filter(planeta => colun(planeta, filtro) > +filtro.value));\n    console.log('maior');\n  }\n\n  function menor(filtro) {\n    setData(data.filter(planeta => colun(planeta, filtro) < +filtro.value));\n  }\n\n  function igual(filtro) {\n    setData(data.filter(planeta => colun(planeta, filtro) === filtro.value));\n  }\n\n  function filtrar() {\n    console.log('filtrar');\n\n    if (filterByNumericValues.length === '0') {\n      setData(restoryData);\n    } else {\n      filterByNumericValues.forEach(filtro => {\n        if (filtro.comparison === 'maior que') maior(filtro);\n        if (filtro.comparison === 'menor que') menor(filtro);\n        if (filtro.comparison === 'igual a') igual(filtro);\n      });\n    }\n  }\n\n  function getColuna(_ref2) {\n    let {\n      target\n    } = _ref2;\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador(_ref3) {\n    let {\n      target\n    } = _ref3;\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  function getOperando(_ref4) {\n    let {\n      target\n    } = _ref4;\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador(_ref5) {\n    let {\n      target\n    } = _ref5;\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem(_ref6) {\n    let {\n      target\n    } = _ref6;\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName(_ref7) {\n    let {\n      target\n    } = _ref7;\n    const valor = target.value;\n    setName(valor);\n  }\n\n  function getOpColuna() {\n    const usados = filterByNumericValues.map(item => item.column);\n    const valor = opColuna.filter(item => !usados.includes(item));\n    setOpColuna(valor);\n  }\n\n  function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando\n    };\n    const temp = [...filterByNumericValues, valor];\n    console.log(temp);\n    setFilter(temp);\n  }\n\n  function deletFilter(_ref8) {\n    let {\n      target\n    } = _ref8;\n    const delName = target.name;\n    const temp = filterByNumericValues.filter(item => item.column !== delName);\n    console.log(temp);\n    setFilter(temp);\n  }\n\n  useEffect(() => {\n    getOpColuna(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n  useEffect(() => {\n    setColuna(opColuna[0]); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [opColuna]);\n  useEffect(() => {\n    filtrar();\n    console.log('1'); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByNumericValues]);\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    opColuna,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar,\n    deletFilter\n  };\n  return /*#__PURE__*/React.createElement(SwContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired\n};\nexport default StarWarProvider;","map":{"version":3,"sources":["/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js"],"names":["React","useEffect","useState","PropTypes","swPlanetsApi","SwContext","StarWarProvider","children","data","setData","restoryData","setRestoryData","filterByName","setName","filterByNumericValues","setFilter","operador","setOperador","operando","setOperando","ordenador","setOrdenador","ordem","setOrdem","opColuna","setOpColuna","coluna","setColuna","getData","temp","results","filterData","filter","planet","name","includes","length","colun","planeta","filtro","column","population","orbital_period","diameter","rotation_period","surface_water","console","log","maior","value","menor","igual","filtrar","forEach","comparison","getColuna","target","valor","getOperador","getOperando","getOrdenador","getOrdem","getName","getOpColuna","usados","map","item","getFilter","deletFilter","delName","contextValue","propTypes","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n  const [opColuna, setOpColuna] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [coluna, setColuna] = useState(opColuna[0]);\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setOperador('maior que');\n    setRestoryData(temp.results);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter((planet) => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) { filterData(); } else { getData(); }\n  }\n\n  useEffect(() => {\n    filter();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n\n  /* function colun(planeta) {\n    if (coluna === 'population') return (planeta.population);\n    if (coluna === 'orbital_period') return (planeta.orbital_period);\n    if (coluna === 'diameter') return (planeta.diameter);\n    if (coluna === 'rotation_period') return (planeta.rotation_period);\n    if (coluna === 'surface_water') return (planeta.surface_water);\n    console.log('colun');\n  }\n\n  function maior() {\n    setData(data.filter((planeta) => (colun(planeta)) > +operando));\n  }\n\n  function menor() {\n    setData(data.filter((planeta) => (colun(planeta)) < +operando));\n  }\n\n  function igual() {\n    setData(data.filter((planeta) => (colun(planeta)) === operando));\n  }\n\n  async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  } */\n\n  function colun(planeta, filtro) {\n    if (filtro.column === 'population') return (planeta.population);\n    if (filtro.column === 'orbital_period') return (planeta.orbital_period);\n    if (filtro.column === 'diameter') return (planeta.diameter);\n    if (filtro.column === 'rotation_period') return (planeta.rotation_period);\n    if (filtro.column === 'surface_water') return (planeta.surface_water);\n    console.log('colun');\n  }\n\n  function maior(filtro) {\n    setData(data.filter((planeta) => (colun(planeta, filtro)) > +filtro.value));\n    console.log('maior');\n  }\n\n  function menor(filtro) {\n    setData(data.filter((planeta) => (colun(planeta, filtro)) < +filtro.value));\n  }\n\n  function igual(filtro) {\n    setData(data.filter((planeta) => (colun(planeta, filtro)) === filtro.value));\n  }\n\n  function filtrar() {\n    console.log('filtrar');\n    if (filterByNumericValues.length === '0') {\n      setData(restoryData);\n    } else {\n      filterByNumericValues.forEach((filtro) => {\n        if (filtro.comparison === 'maior que') maior(filtro);\n        if (filtro.comparison === 'menor que') menor(filtro);\n        if (filtro.comparison === 'igual a') igual(filtro);\n      });\n    }\n  }\n\n  function getColuna({ target }) {\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador({ target }) {\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  function getOperando({ target }) {\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador({ target }) {\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem({ target }) {\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName({ target }) {\n    const valor = target.value;\n    setName(valor);\n  }\n\n  function getOpColuna() {\n    const usados = filterByNumericValues.map((item) => item.column);\n    const valor = opColuna.filter((item) => !usados.includes(item));\n    setOpColuna(valor);\n  }\n\n  function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando,\n    };\n    const temp = [...filterByNumericValues, valor];\n    console.log(temp);\n    setFilter(temp);\n  }\n\n  function deletFilter({ target }) {\n    const delName = target.name;\n    const temp = filterByNumericValues.filter((item) => item.column !== delName);\n    console.log(temp);\n    setFilter(temp);\n  }\n\n  useEffect(() => {\n    getOpColuna();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  useEffect(() => {\n    setColuna(opColuna[0]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [opColuna]);\n\n  useEffect(() => {\n    filtrar();\n    console.log('1');\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByNumericValues]);\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    opColuna,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar,\n    deletFilter,\n  };\n\n  return (\n    <SwContext.Provider value={ contextValue }>\n      { children }\n    </SwContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired,\n};\n\nexport default StarWarProvider;\n"]},"metadata":{},"sourceType":"module"}