{"ast":null,"code":"var _jsxFileName = \"/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [coluna, setColuna] = useState('');\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n\n  function getColuna(_ref2) {\n    let {\n      target\n    } = _ref2;\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador(_ref3) {\n    let {\n      target\n    } = _ref3;\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setRestoryData(temp.results);\n    getColuna();\n    getOperador();\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter(planet => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) {\n      filterData();\n    } else {\n      getData();\n    }\n  }\n\n  useEffect(() => {\n    filter(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n\n  function colun(planeta) {\n    if (operador === 'population') return planeta.population;\n    if (operador === 'orbital_period') return planeta.orbital_period;\n    if (operador === 'diameter') return planeta.diameter;\n    if (operador === 'rotation_period') return planeta.rotation_period;\n    if (operador === 'surface_water') return planeta.surface_water;\n    console.log('colun');\n  }\n\n  function maior() {\n    const temp = data.filter(planeta => colun(planeta) > operando);\n    console.log(maior());\n    return temp;\n  }\n\n  function menor() {\n    const temp = data.filter(planeta => colun(planeta) < operando);\n    console.log('menor');\n    return temp;\n  }\n\n  function igual() {\n    const temp = data.filter(planeta => colun(planeta) === operando);\n    console.log('igual');\n    return temp;\n  }\n\n  async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  }\n\n  function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando\n    };\n    const temp = [...filterByNumericValues, valor];\n    console.log('getFilter');\n    setFilter(temp);\n    filtrar();\n  }\n\n  function getOperando(_ref4) {\n    let {\n      target\n    } = _ref4;\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador(_ref5) {\n    let {\n      target\n    } = _ref5;\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem(_ref6) {\n    let {\n      target\n    } = _ref6;\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName(_ref7) {\n    let {\n      target\n    } = _ref7;\n    const valor = target.value;\n    setName(valor);\n  }\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar\n  };\n  return /*#__PURE__*/React.createElement(SwContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired\n};\nexport default StarWarProvider;","map":{"version":3,"sources":["/home/johnata/trybe/projetos/sd-019-a-project-starwars-planets-search/src/swProvider.js"],"names":["React","useEffect","useState","PropTypes","swPlanetsApi","SwContext","StarWarProvider","children","data","setData","restoryData","setRestoryData","filterByName","setName","filterByNumericValues","setFilter","coluna","setColuna","operador","setOperador","operando","setOperando","ordenador","setOrdenador","ordem","setOrdem","getColuna","target","valor","value","getOperador","getData","temp","results","filterData","filter","planet","name","includes","length","colun","planeta","population","orbital_period","diameter","rotation_period","surface_water","console","log","maior","menor","igual","filtrar","getFilter","column","comparison","getOperando","getOrdenador","getOrdem","getName","contextValue","propTypes","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport swPlanetsApi from './componetes/api';\nimport SwContext from './swContex';\n\nfunction StarWarProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [restoryData, setRestoryData] = useState([]);\n  const [filterByName, setName] = useState('');\n  const [filterByNumericValues, setFilter] = useState([]);\n  const [coluna, setColuna] = useState('');\n  const [operador, setOperador] = useState('');\n  const [operando, setOperando] = useState(0);\n  const [ordenador, setOrdenador] = useState('');\n  const [ordem, setOrdem] = useState('');\n\n  function getColuna({ target }) {\n    const valor = target.value;\n    setColuna(valor);\n  }\n\n  function getOperador({ target }) {\n    const valor = target.value;\n    setOperador(valor);\n  }\n\n  async function getData() {\n    const temp = await swPlanetsApi();\n    setData(temp.results);\n    setRestoryData(temp.results);\n    getColuna();\n    getOperador();\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function filterData() {\n    const temp = restoryData.filter((planet) => planet.name.includes(filterByName));\n    setData(temp);\n  }\n\n  function filter() {\n    if (filterByName.length !== 0) { filterData(); } else { getData(); }\n  }\n\n  useEffect(() => {\n    filter();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterByName]);\n\n  function colun(planeta) {\n    if (operador === 'population') return (planeta.population);\n    if (operador === 'orbital_period') return (planeta.orbital_period);\n    if (operador === 'diameter') return (planeta.diameter);\n    if (operador === 'rotation_period') return (planeta.rotation_period);\n    if (operador === 'surface_water') return (planeta.surface_water);\n    console.log('colun');\n  }\n\n  function maior() {\n    const temp = data.filter((planeta) => (colun(planeta)) > operando);\n    console.log(maior());\n    return temp;\n  }\n\n  function menor() {\n    const temp = data.filter((planeta) => (colun(planeta)) < operando);\n    console.log('menor');\n    return temp;\n  }\n\n  function igual() {\n    const temp = data.filter((planeta) => (colun(planeta)) === operando);\n    console.log('igual');\n    return temp;\n  }\n\n  async function filtrar() {\n    if (operador === 'maior que') maior();\n    if (operador === 'menor que') menor();\n    if (operador === 'igual a') igual();\n    console.log('filtrar');\n  }\n\n  function getFilter() {\n    const valor = {\n      column: coluna,\n      comparison: operador,\n      value: operando,\n    };\n    const temp = [...filterByNumericValues, valor];\n    console.log('getFilter');\n    setFilter(temp);\n    filtrar();\n  }\n\n  function getOperando({ target }) {\n    const valor = target.value;\n    setOperando(valor);\n  }\n\n  function getOrdenador({ target }) {\n    const valor = target.value;\n    setOrdenador(valor);\n  }\n\n  function getOrdem({ target }) {\n    const valor = target.value;\n    setOrdem(valor);\n  }\n\n  function getName({ target }) {\n    const valor = target.value;\n    setName(valor);\n  }\n\n  const contextValue = {\n    data,\n    coluna,\n    operador,\n    operando,\n    ordenador,\n    ordem,\n    filterByName,\n    filterByNumericValues,\n    getFilter,\n    getName,\n    getColuna,\n    getOperador,\n    getOperando,\n    getOrdenador,\n    getOrdem,\n    filter,\n    setFilter,\n    filtrar,\n  };\n\n  return (\n    <SwContext.Provider value={ contextValue }>\n      { children }\n    </SwContext.Provider>\n  );\n}\n\nStarWarProvider.propTypes = {\n  children: PropTypes.objectOf.isRequired,\n};\n\nexport default StarWarProvider;\n"]},"metadata":{},"sourceType":"module"}